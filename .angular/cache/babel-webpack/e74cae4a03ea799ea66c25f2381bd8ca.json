{"ast":null,"code":"import { of } from 'rxjs';\nimport { HEROES } from './mock-heroes';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let HeroService = /*#__PURE__*/(() => {\n  class HeroService {\n    //constructorの引数\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.heroesUrl = 'api/heroes'; // Web APIのURL\n    }\n    /** HeroServiceのメッセージをMessageServiceを使って記録 */\n\n\n    log(message) {\n      this.messageService.add(`HeroService: ${message}`);\n    }\n    /**\r\n     * 失敗したHttp操作を処理します。\r\n     * アプリを持続させます。\r\n     * @param operation - 失敗した操作の名前\r\n     * @param result - observableな結果として返す任意の値\r\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: リモート上のロギング基盤にエラーを送信する\n        console.error(error); // かわりにconsoleに出力\n        // TODO: ユーザーへの開示のためにエラーの変換処理を改善する\n\n        this.log(`${operation} failed: ${error.message}`); // 空の結果を返して、アプリを持続可能にする\n\n        return of(result);\n      };\n    }\n    /** サーバーからヒーローを取得する */\n\n\n    getHeroes() {\n      return this.http.get(this.heroesUrl).pipe(tap(heroes => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n    }\n\n    getHero(id) {\n      // For now, assume that a hero with the specified `id` always exists.\n      // Error handling will be added in the next step of the tutorial.\n      const hero = HEROES.find(h => h.id === id);\n      this.messageService.add(`HeroService: fetched hero id=${id}`);\n      return of(hero);\n    }\n\n  }\n\n  HeroService.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  HeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n  return HeroService;\n})();","map":null,"metadata":{},"sourceType":"module"}